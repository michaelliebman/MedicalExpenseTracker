// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.github.msl521.met.domain;

import com.github.msl521.met.domain.ProviderType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ProviderTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProviderTypeDataOnDemand: @Component;
    
    private Random ProviderTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<ProviderType> ProviderTypeDataOnDemand.data;
    
    public ProviderType ProviderTypeDataOnDemand.getNewTransientProviderType(int index) {
        ProviderType obj = new ProviderType();
        return obj;
    }
    
    public ProviderType ProviderTypeDataOnDemand.getSpecificProviderType(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ProviderType obj = data.get(index);
        return ProviderType.findProviderType(obj.getId());
    }
    
    public ProviderType ProviderTypeDataOnDemand.getRandomProviderType() {
        init();
        ProviderType obj = data.get(rnd.nextInt(data.size()));
        return ProviderType.findProviderType(obj.getId());
    }
    
    public boolean ProviderTypeDataOnDemand.modifyProviderType(ProviderType obj) {
        return false;
    }
    
    public void ProviderTypeDataOnDemand.init() {
        data = ProviderType.findProviderTypeEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ProviderType' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.github.msl521.met.domain.ProviderType>();
        for (int i = 0; i < 10; i++) {
            ProviderType obj = getNewTransientProviderType(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
