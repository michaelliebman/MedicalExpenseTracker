// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.github.msl521.met.domain;

import com.github.msl521.met.domain.OfficeVisit;
import com.github.msl521.met.domain.OfficeVisitDataOnDemand;
import com.github.msl521.met.domain.Payment;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PaymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PaymentDataOnDemand: @Component;
    
    private Random PaymentDataOnDemand.rnd = new SecureRandom();
    
    private List<Payment> PaymentDataOnDemand.data;
    
    @Autowired
    private OfficeVisitDataOnDemand PaymentDataOnDemand.officeVisitDataOnDemand;
    
    public Payment PaymentDataOnDemand.getNewTransientPayment(int index) {
        Payment obj = new Payment();
        setAmount(obj, index);
        setCheckNumber(obj, index);
        setOfficeVisit(obj, index);
        setPayee(obj, index);
        setPaymentDate(obj, index);
        return obj;
    }
    
    public void PaymentDataOnDemand.setAmount(Payment obj, int index) {
        double amount = new Integer(index).doubleValue();
        if (amount > 9.999999999E7D) {
            amount = 9.999999999E7D;
        }
        obj.setAmount(amount);
    }
    
    public void PaymentDataOnDemand.setCheckNumber(Payment obj, int index) {
        int checkNumber = index;
        if (checkNumber < 0) {
            checkNumber = 0;
        }
        obj.setCheckNumber(checkNumber);
    }
    
    public void PaymentDataOnDemand.setOfficeVisit(Payment obj, int index) {
        OfficeVisit officeVisit = officeVisitDataOnDemand.getRandomOfficeVisit();
        obj.setOfficeVisit(officeVisit);
    }
    
    public void PaymentDataOnDemand.setPaymentDate(Payment obj, int index) {
        Date paymentDate = new Date(new Date().getTime() - 10000000L);
        obj.setPaymentDate(paymentDate);
    }
    
    public Payment PaymentDataOnDemand.getSpecificPayment(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Payment obj = data.get(index);
        return Payment.findPayment(obj.getId());
    }
    
    public Payment PaymentDataOnDemand.getRandomPayment() {
        init();
        Payment obj = data.get(rnd.nextInt(data.size()));
        return Payment.findPayment(obj.getId());
    }
    
    public boolean PaymentDataOnDemand.modifyPayment(Payment obj) {
        return false;
    }
    
    public void PaymentDataOnDemand.init() {
        data = Payment.findPaymentEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Payment' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.github.msl521.met.domain.Payment>();
        for (int i = 0; i < 10; i++) {
            Payment obj = getNewTransientPayment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
