// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.github.msl521.met.domain;

import com.github.msl521.met.domain.Provider;
import com.github.msl521.met.domain.ProviderType;
import com.github.msl521.met.domain.ProviderTypeDataOnDemand;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProviderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProviderDataOnDemand: @Component;
    
    private Random ProviderDataOnDemand.rnd = new SecureRandom();
    
    private List<Provider> ProviderDataOnDemand.data;
    
    @Autowired
    private ProviderTypeDataOnDemand ProviderDataOnDemand.providerTypeDataOnDemand;
    
    public Provider ProviderDataOnDemand.getNewTransientProvider(int index) {
        Provider obj = new Provider();
        setName(obj, index);
        setProviderType(obj, index);
        return obj;
    }
    
    public void ProviderDataOnDemand.setName(Provider obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ProviderDataOnDemand.setProviderType(Provider obj, int index) {
        ProviderType providerType = providerTypeDataOnDemand.getRandomProviderType();
        obj.setProviderType(providerType);
    }
    
    public Provider ProviderDataOnDemand.getSpecificProvider(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Provider obj = data.get(index);
        return Provider.findProvider(obj.getId());
    }
    
    public Provider ProviderDataOnDemand.getRandomProvider() {
        init();
        Provider obj = data.get(rnd.nextInt(data.size()));
        return Provider.findProvider(obj.getId());
    }
    
    public boolean ProviderDataOnDemand.modifyProvider(Provider obj) {
        return false;
    }
    
    public void ProviderDataOnDemand.init() {
        data = Provider.findProviderEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Provider' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.github.msl521.met.domain.Provider>();
        for (int i = 0; i < 10; i++) {
            Provider obj = getNewTransientProvider(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
